@{
    ViewBag.Title = "Home Page";
}

<style>
    .required {
        color: red;
    }

    /* Remove bullet points from checkboxes */
    ul#equipmentList {
        list-style-type: none;
        margin: 0;
        padding: 0;
    }

    /* Add spacing between label and checkbox */
    input[type=checkbox] {
        margin: 0px 5px 0px 0px;
    }
</style>

<h1>Pre-shift Checklist</h1>
<div class="form-group">
    <label for="name">
        <b>Worker</b> <span class="required">*</span>
    </label>
    <input type="text" id="name" class="form-control" role="textbox" placeholder="Please enter your name here" />
</div>
<div class="form-group">
    <label for="equipmentList">Select your equipment</label>
    <ul id="equipmentList" class="list-group-flush"></ul>
</div>
<button id="completeButton" class="btn btn-primary" role="button">Complete</button>

<script type="text/javascript">
    class IndexPage {
        loadEquipmentList() {
            const http = new XMLHttpRequest();
            const url = `Home/GetEquipmentChecklist`;

            http.open('GET', url);
            http.send();

            http.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    const equipmentList = document.getElementById('equipmentList');
                    const results = JSON.parse(http.responseText);

                    // Create the checkboxes and labels
                    results.forEach(e => {
                        const checkbox = document.createElement('input');

                        checkbox.id = e.Id;
                        checkbox.type = 'checkbox';
                        checkbox.setAttribute('data-id', e.Id);

                        const label = document.createElement('label');

                        label.textContent = e.Name;

                        // Add 'for' attribute to label 
                        label.setAttribute('for', e.Id);

                        const item = document.createElement('li');

                        item.appendChild(checkbox);
                        item.appendChild(label);

                        // Append to the parent list
                        equipmentList.appendChild(item);
                    });
                }
            }
        }

        setupCompleteButton() {
            const button = document.getElementById('completeButton');

            // Create an error message
            let errorMessage = 'Worker field is empty';

            button.addEventListener('click', function (e) {

                // Get the worker's name
                const workerField = document.getElementById('name').value;

                // Check if the worker field is empty
                if (workerField.toString() === '' || workerField === null) {
                    alert(errorMessage);
                }
                else {
                    // Get all the selected checkboxes to figure out the ids
                    const selectedCheckboxes = document.querySelectorAll('input[type=checkbox]:checked');
                    let payload = {
                        // Add worker's name
                        worker: workerField,

                        // Convert Nodelist of checkbox ids into an array
                        selectedEquipment: Array.prototype.map.call(selectedCheckboxes, e => e.dataset.id.toString())
                    };

                    console.log(JSON.stringify(payload));
                } 
            });
        }
    };

    document.addEventListener('DOMContentLoaded', function () {
        var Index = new IndexPage();

        Index.loadEquipmentList();
        Index.setupCompleteButton();
    });
</script>
